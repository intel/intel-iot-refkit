DISTRO = "refkit"
DISTRO_NAME = "IoT Reference OS Kit for Intel(r) Architecture"
# The version is bumped after each official release.
# This implies that new releases go out with a version
# string based on the predecessor plus the suffix
DISTRO_VERSION = "1.0+snapshot-${DATE}"
DISTRO_VERSION[vardepsexclude] = "DATE"
SDK_VENDOR = "-refkitsdk"
SDK_VERSION := "${@'${DISTRO_VERSION}'.replace('snapshot-${DATE}','snapshot')}"
SDK_NAME_PREFIX = "refkit"

# Set custom tasks from IoT Reference OS Kit layers as recursive dependencies to do_populate_sdk.
SDK_RECRDEP_TASKS = "do_deploy_files do_uefiapp"

INHERIT += "refkit-version"

# IoT Reference OS Kit tries to build minimal images and thus prefers Busybox or
# Toybox over coreutils or any other package providing similar
# functionality. For technical reasons, this is crucial when building
# swupd bundles: Busybox/Toybox must be picked consistently, even when
# a bundle pulls in alternatives like coreutils which normally would
# have a higher priority.
#
# This gets achieved in two ways:
# 1. via refkit-update-alternatives.bbclass we modify all packages
#    so that their update-alternatives priority can be modified
#    during install time
# 2. in refkit-image.bbclass we reconfigure those priorities
#    as necessary
#
# This is still a change that is done consistently for all images,
# whether they use swupd or not, to ensure that the result is
# identical. Doing it at image creation time reduces the need
# for recompilations of packages and opens up the possibility
# for downstream developers to override the defaults while
# reusing pre-compiled binaries from our sstate.
INHERIT += "refkit-update-alternatives"

# If meta-swupd is used, then swupd-client must be compiled so
# that it updates files in /etc because IoT Reference OS Kit is not
# stateless.
PACKAGECONFIG_remove_pn-swupd-client = "stateless"

# TODO:
# 1. https://github.com/ostroproject/ostro-os-xt/tree/master/meta-ostro-xt/recipes-swupd/swupd-client/swupd-client
#    has a more recent, shell-based version of the EFI combo updater.
# 2. Ostro OS disables boot_file_heuristics() in swupd-client:
#    https://github.com/ostroproject/ostro-os/blob/master/meta-ostro/recipes-swupd/swupd-client/swupd-client/0001-Disable-boot-file-heuristics.patch
#
# As it stands, kernel updates via swupd are untested and the
# current setup just shows how it could work in principle.

# OE-core 7355a3c4f665e066925ea6327ac72365ab1f2f39 added a PACKAGECONFIG
# to configure cairo/python3-cairo and enabled it by default. It used to
# be unconditionally disabled and that worked OK for us so we'll restore
# that to avoid additional build dependencies/supported recipes. The
# setting overrides the weak default value so that a user is still able
# to set the desired final value in local.conf
PACKAGECONFIG_pn-python3-pygobject ?= ""

# pango, a graphical text rendering library, is not needed by us.
PACKAGECONFIG_remove_pn-gstreamer1.0-plugins-base = "pango"

MAINTAINER = "Mikko Ylinen <mikko.ylinen@linux.intel.com>"

TARGET_VENDOR = "-refkit"

REFKIT_DEFAULT_DISTRO_FEATURES = "systemd bluez5 pam"
REFKIT_DEFAULT_EXTRA_RDEPENDS ??= ""
REFKIT_DEFAULT_EXTRA_RRECOMMENDS ??= ""

# Smack security is a distribution feature which can be enabled or
# disabled as needed. To simplify recipes, there is also a smack
# override.
#
# At the moment, these settings must be kept in sync manually: the
# "smack" override must be set if and only if the "smack" distro
# feature is set.
#
# In other words, to disable the default in a local.conf, change two variables
# like this:
#  REFKIT_SMACK_OVERRIDE = ""
#  REFKIT_DEFAULT_DISTRO_FEATURES_remove = "smack"

#REFKIT_DEFAULT_DISTRO_FEATURES += "smack"
#REFKIT_SMACK_OVERRIDE ?= ":smack"
#DISTROOVERRIDES .= "${REFKIT_SMACK_OVERRIDE}"

# IMA/EVM depend on compiling some components (currently the kernel)
# differently. This distro feature enables that.
#REFKIT_DEFAULT_DISTRO_FEATURES += "ima"

# When building refkit-initramfs and IMA is enabled, the
# distro-specific IMA policy chosen below gets compiled into it. The
# rootfs signing has to match, therefore this is a distro setting. The
# actual policy file is in meta-refkit/files/ima_policy_refkit.
#
# By default, all files will be signed. Once IMA is active and its
# policy includes a signed file, such signed files can be removed and
# replaced, but not modified. Therefore we have to exclude certain
# read/write files from signing and instead only hash them.
#
# To find such files, boot a signed image with no_ima, then run:
# cd /
# find etc usr -type f |
# while read i; do
#    ima=$(getfattr -d -e hex -m security.ima "$i" | grep security.ima)
#    if [ $(echo $ima | wc -c) -gt 60 ] ; then
#        if evmctl ima_verify "$i" >/dev/null; then
#            echo "Signature okay: $i"
#        else
#            echo "Broken signature: $i"
#        fi
#    elif [ -n "$ima" ]; then
#        if [ $(echo $ima | cut -c18-) = $(sha1sum "$i" | cut -c0-41) ]; then
#            echo "Hash okay: $i"
#        else
#            echo "Broken hash : $i"
#        fi
#    else
#        echo "Unprotected: $i"
#    fi
# done
#
# Files which get modified during booting will show up as "broken"
# or "unprotected".
#
# At the moment, IoT Reference OS Kit sets up IMA so that everything must be either
# signed (thus becoming read-only) or hashed (writeable because the
# kernel will updated hashes). Everything under /etc, /var, /home and /usr/dbspace
# is writable. Because an attacker can downgrade a file from signed to
# hashed and set a valid hash, this example policy is *not secure*.
#
# Common pitfalls:
# - After booting without IMA, enabling IMA again may run into problems
#   because files were modified without updating the hash. This can be
#   done manually with "evmctl ima_hash <file>".
# - rootfs must be mounted with "i_version" (see ima-evm-rootfs.bbclass for
#   more information). This is done via the "rootflags" boot parameter
#   (via APPEND) because only remounting like that via fstab is problematic
#   for those files written by systemd before remounting (/etc/machine-id!).
#   In addition, ima-evm-rootfs.bbclass also adds the parameter to the rootfs
#   because otherwise systemd would remove it.
# - When image signing is disabled, we must not load the IMA policy.
#   Alternatively, we could add a refkit-initramfs-noima, but the
#   benefits of that (smaller initramfs) do not justify the downsides
#   (building becomes slower).
FILESEXTRAPATHS_prepend_pn-initramfs-framework-ima = "${META_REFKIT_BASE}/files:"
IMA_POLICY_pn-initramfs-framework-ima = "ima_policy_refkit"
REFKIT_WRITABLE_FILES = "-path './etc/*' -o -path './var/*' -o -path './home/*' -o -path './usr/dbspace/*'"
IMA_EVM_ROOTFS_SIGNED = ". -type f -a -uid 0 -a ! \( ${REFKIT_WRITABLE_FILES} \)"
IMA_EVM_ROOTFS_HASHED = ". -type f -a -uid 0 -a \( ${REFKIT_WRITABLE_FILES} \)"
IMA_EVM_ROOTFS_IVERSION = "/"

# ptests are useful for QA. Enabling them in the distro creates
# additional packages in each recipe that supports ptests and thus
# allows building images with those tests included. Enabling ptests
# should have no effect on normal packages; if there is an effect,
# then that is a bug in the recipe.
REFKIT_DEFAULT_DISTRO_FEATURES += "ptest"

# Enable the distribution-level changes for Computer Vision profile.
# Opengl distro feature is needed for libva.
REFKIT_DEFAULT_DISTRO_FEATURES += "opengl"

# only build minimal gstreamer1.0-plugins-bad
PACKAGECONFIG_pn-gstreamer1.0-plugins-bad ?= ""

# Remove currently unsupported distro features from global defaults
DISTRO_FEATURES_DEFAULT_remove = "x11 3g"

DISTRO_FEATURES ?= "${DISTRO_FEATURES_DEFAULT} ${DISTRO_FEATURES_LIBC} ${REFKIT_DEFAULT_DISTRO_FEATURES}"

# set required kernel subtype options
#INTEL_MACHINE_SUBTYPE = "broxton-m"
#PREFERRED_VERSION_linux-yocto_intel-corei7-64 ?= "4.4%"

# Use UEFI-based "dsk" image format for machines supporting UEFI.
# Defined here because it influences several different recipes.
REFKIT_USE_DSK_IMAGES ?= "${@bb.utils.contains_any('MACHINE', 'intel-core2-32 intel-corei7-64 intel-quark', 'True', 'False', d)}"

# When using UEFI-based dsk-style image format created by wic,
# we don't need syslinux and grub-efi and can avoid building them.
DEPENDS_remove_pn-wic-tools = "${@ 'syslinux grub-efi' if ${REFKIT_USE_DSK_IMAGES} else '' }"

DISTRO_EXTRA_RDEPENDS += " ${REFKIT_DEFAULT_EXTRA_RDEPENDS}"
DISTRO_EXTRA_RRECOMMENDS += " ${REFKIT_DEFAULT_EXTRA_RRECOMMENDS}"

QEMU_TARGETS ?= "arm i386 x86_64"

VIRTUAL-RUNTIME_init_manager = "systemd"
VIRTUAL-RUNTIME_initscripts = ""
DISTRO_FEATURES_BACKFILL_CONSIDERED = "sysvinit pulseaudio"

require conf/distro/include/no-static-libs.inc
require conf/distro/include/refkit_security_flags.inc

# Build distro stateless, i.e. with /etc empty straight out of the box
# and reserved for customizations by the admin.
require conf/distro/include/stateless.inc

# QA check settings - a little stricter than the OE-Core defaults
WARN_TO_ERROR_QA = "already-stripped compile-host-path install-host-path \
                    installed-vs-shipped ldflags pn-overrides rpaths staticdev \
                    useless-rpaths build-deps"
WARN_QA_remove = "${WARN_TO_ERROR_QA}"
ERROR_QA_append = " ${WARN_TO_ERROR_QA}"

# Add some IoT Reference OS Kit specific checks in addition to those provided by sanity.bbclass.
INHERIT += "refkit-sanity"

# The swupd update mechanism currently does not cope with user or
# group IDs that change between builds
# (https://github.com/clearlinux/swupd-client/issues/101). Even if it
# did, changing IDs would make the update more complicated (larger
# delta, daemons need to be restarted, etc.), so it is better to
# ensure that IDs are static.
#
# IoT Reference OS Kit uses the static uid and gid mechanism from OE-core for that
# (http://www.yoctoproject.org/docs/latest/mega-manual/mega-manual.html#ref-classes-useradd),
# with custom support for adding systemd sysusers in IoT Reference OS Kit's
# systemd-sysusers.bbclass.  The OE-core mechanism for that currently
# lacks support for static IDs and thus cannot be used yet
# (https://bugzilla.yoctoproject.org/show_bug.cgi?id=9789).
#
# Dynamically assigned IDs are detected and lead to an error during
# the build. For example, the dbus recipe creates a "messagebus"
# group. Not defining that group causes an error when parsing the
# recipe and makes it unusable, leading to the following errors
# during "bitbake dbus":
# ERROR: Nothing PROVIDES 'dbus'
# ERROR: dbus was skipped: Function failed: dbus - dbus: username messagebus does not have a static ID defined.
#
# When building images, the errors shows up as missing components
# which are required for the build, as in "bitbake refkit-image-common":
# ERROR: Nothing RPROVIDES 'udev' (but /work/iot-ref-kit/meta/recipes-core/packagegroups/packagegroup-core-boot.bb, /work/iot-ref-kit/meta/recipes-core/initrdscripts/initramfs-framework_1.0.bb RDEPENDS on or otherwise requires it)
# ERROR: Required build target 'refkit-image-common' has no buildable providers.
#
# The advantage of this mechanism is the decentralized assignment of
# IDs without modifying the OS or recipes.
#
# Developers who need to add new entries should add their own mapping
# file to USERADD_UID_TABLES and/or USERADD_GID_TABLES, either in a
# derived distro config or in their local.conf. IoT Reference OS Kit reserves
# the value range < 2000.
#
# For experiments and builds not involving swupd it is also possible to
# disable the mechanism by modifying USERADD_ERROR_DYNAMIC:
# "warn" merely prints a warning, empty value silently allows dynamic
# ID allocation.
USERADDEXTENSION = "useradd-staticids"
USERADD_ERROR_DYNAMIC ??= "error"
USERADD_UID_TABLES += "conf/distro/include/refkit-passwd"
USERADD_GID_TABLES += "conf/distro/include/refkit-group"

# Only specific recipes are supported by the IoT Reference OS Kit Project. Those
# recipes are listed in the following file.
#
# It is possible to add additional file names, for example in derived
# distros or products, separated by spaces, or completely replace the
# default list.
SUPPORTED_RECIPES ?= " \
    ${META_REFKIT_BASE}/conf/distro/include/devtool-supported-recipes.txt \
    ${META_REFKIT_BASE}/conf/distro/include/refkit-supported-recipes.txt \
"
SUPPORTED_RECIPES[devtool-supported-recipes.txt] = "developer"
SUPPORTED_RECIPES[refkit-supported-recipes.txt] = "refkit"

# Inheriting this class ensures that a "world build" of IoT Reference OS Kit only
# builds the supported recipes. In addition, local.conf.sample activates
# a check that ensures that nothing gets built which is not supported.
INHERIT += "supported-recipes"

# Nothing prevents building something (like a custom image, for
# example) also with other recipes included in a build. However,
# sometimes that is unintentional or even an error, for example when
# some unexpected component gets pulled in via an unanticipated
# dependency change.
#
# To enable a warning about this before the build starts, set this
# variable to "warn" in local.conf. "fatal" prints the same message
# and aborts the build automatically.
#
# SUPPORTED_RECIPES_CHECK = "warn"

# IoT Reference OS Kit removes certain packages from images because the components are known
# to have compile issues and/or are not supported. Can be modified in derived
# distros or via local.conf.
REFKIT_REMOVE_PACKAGES ?= " \
    oprofileui-server \
    lttng-tools \
"
RDEPENDS_packagegroup-core-device-devel_remove_pn-packagegroup-core-device-devel = "${REFKIT_REMOVE_PACKAGES}"
RDEPENDS_packagegroup-core-tools-profile_remove_pn-packagegroup-core-tools-profile = "${REFKIT_REMOVE_PACKAGES}"

# It is uncertain whether rhino is really an allarch package. It's signature
# is different among machines, causing the iotsstatetests.SStateTests.test_sstate_samesigs
# to fail. We play it save here and make the recipe specific to the tune flags.
# Needs further investigations by upstream.
PACKAGE_ARCH_pn-rhino = "${TUNE_PKGARCH}"

# re-use uninative shim released by Yocto Project / OE
require conf/distro/include/yocto-uninative.inc
INHERIT += "uninative"

# Disable running fsck at boot. System clock is typically wrong at early boot
# stage due to lack of RTC backup battery. This causes unnecessary fixes being
# made due to filesystem metadata time stamps being in future.
APPEND_append = " fsck.mode=skip"

# temporary workaround: dm-verity.scc already submitted
KERNEL_FEATURES_append = "${@ bb.utils.contains('DISTRO_FEATURES', 'dm-verity', ' dm-verity.scc', '', d) }"
SRC_URI_append_pn-linux-yocto = " file://dm-verity.scc"
FILESEXTRAPATHS_prepend_pn-linux-yocto = "${META_REFKIT_BASE}/files/linux-yocto:"

# Blacklisted in meta-openembedded because it fails on arm.
# We can override that for now.
PNBLACKLIST[multipath-tools] = ""
