From b5a475cbabd67a7c31c01698f55814895f194730 Mon Sep 17 00:00:00 2001
From: Ismo Puustinen <ismo.puustinen@intel.com>
Date: Fri, 24 Feb 2017 16:07:09 +0200
Subject: [PATCH 5/6] io: change to imageio.

This gets rid of the whole sciki-image dependency (and as a consequence,
drops the matplotlib dependency). Note that some operations meant for
image resizing still use other dependencies -- the imports have been
pushed into the respective code branches to avoid top-level
dependencies.

Upstream-status: Inappropriate

Signed-off-by: Ismo Puustinen <ismo.puustinen@intel.com>
---
 python/caffe/io.py | 15 +++++++++++----
 1 file changed, 11 insertions(+), 4 deletions(-)

diff --git a/python/caffe/io.py b/python/caffe/io.py
index e1759be..ebccca2 100644
--- a/python/caffe/io.py
+++ b/python/caffe/io.py
@@ -1,7 +1,5 @@
 import numpy as np
-import skimage.io
-from scipy.ndimage import zoom
-from skimage.transform import resize
+import imageio
 
 try:
     # Python3 will most likely not be able to load protobuf
@@ -139,6 +137,7 @@ class Transformer:
         -------
         caffe_in : (K x H x W) ndarray for input to a Net
         """
+
         self.__check_input(in_)
         caffe_in = data.astype(np.float32, copy=False)
         transpose = self.transpose.get(in_)
@@ -293,7 +292,7 @@ def load_image(filename, color=True):
         of size (H x W x 3) in RGB or
         of size (H x W x 1) in grayscale.
     """
-    img = skimage.img_as_float(skimage.io.imread(filename, as_grey=not color)).astype(np.float32)
+    img = np.array(np.divide(imageio.imread(filename), 255.0).astype(np.float32))
     if img.ndim == 2:
         img = img[:, :, np.newaxis]
         if color:
@@ -317,7 +316,13 @@ def resize_image(im, new_dims, interp_order=1):
     -------
     im : resized ndarray with shape (new_dims[0], new_dims[1], K)
     """
+
+    if im.shape[:2] == tuple(new_dims):
+        return im
+
     if im.shape[-1] == 1 or im.shape[-1] == 3:
+        from skimage.transform import resize
+
         im_min, im_max = im.min(), im.max()
         if im_max > im_min:
             # skimage is fast but only understands {1,3} channel images
@@ -332,6 +337,8 @@ def resize_image(im, new_dims, interp_order=1):
             ret.fill(im_min)
             return ret
     else:
+        from scipy.ndimage import zoom
+
         # ndimage interpolates anything but more slowly.
         scale = tuple(np.array(new_dims, dtype=float) / np.array(im.shape[:2]))
         resized_im = zoom(im, scale + (1,), order=interp_order)
-- 
2.9.3

